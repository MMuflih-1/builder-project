{
 "Resources": {
  "DogsTable78D17CEF": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "dogId",
      "AttributeType": "S"
     },
     {
      "AttributeName": "state",
      "AttributeType": "S"
     },
     {
      "AttributeName": "createdAt",
      "AttributeType": "S"
     },
     {
      "AttributeName": "species",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "StateIndex",
      "KeySchema": [
       {
        "AttributeName": "state",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "createdAt",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "SpeciesIndex",
      "KeySchema": [
       {
        "AttributeName": "species",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "createdAt",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "dogId",
      "KeyType": "HASH"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": true
    },
    "TableName": "pupper-dogs"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "PupperStack/DogsTable/Resource"
   }
  },
  "VotesTable39A917AC": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "userId",
      "AttributeType": "S"
     },
     {
      "AttributeName": "dogId",
      "AttributeType": "S"
     },
     {
      "AttributeName": "timestamp",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "DogVotesIndex",
      "KeySchema": [
       {
        "AttributeName": "dogId",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "timestamp",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "userId",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "dogId",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": true
    },
    "TableName": "pupper-votes"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "PupperStack/VotesTable/Resource"
   }
  },
  "PupperImagesBucketD100108D": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": "pupper-images-212684282361-us-east-2",
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET",
        "PUT",
        "POST"
       ],
       "AllowedOrigins": [
        "http://localhost:5173",
        "http://localhost:3000"
       ],
       "MaxAge": 3000
      }
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "AbortIncompleteMultipartUpload": {
        "DaysAfterInitiation": 7
       },
       "Id": "DeleteIncompleteMultipartUploads",
       "Status": "Enabled"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": false,
     "BlockPublicPolicy": false,
     "IgnorePublicAcls": false,
     "RestrictPublicBuckets": false
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperImagesBucket/Resource"
   }
  },
  "PupperImagesBucketPolicy2F8AE4CC": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "PupperImagesBucketD100108D"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "AWS": "*"
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "PupperImagesBucketD100108D",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperImagesBucket/Policy/Resource"
   }
  },
  "PupperImagesBucketNotifications13CFE64D": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "PupperImagesBucketD100108D"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".jpg"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "ProcessImageFunction340ACD7C",
         "Arn"
        ]
       }
      },
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".jpeg"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "ProcessImageFunction340ACD7C",
         "Arn"
        ]
       }
      },
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".png"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "ProcessImageFunction340ACD7C",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "PupperImagesBucketAllowBucketNotificationsToPupperStackProcessImageFunctionFDB0A25C574896E4",
    "PupperImagesBucketPolicy2F8AE4CC"
   ],
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperImagesBucket/Notifications/Resource"
   }
  },
  "PupperImagesBucketAllowBucketNotificationsToPupperStackProcessImageFunctionFDB0A25C574896E4": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ProcessImageFunction340ACD7C",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": "212684282361",
    "SourceArn": {
     "Fn::GetAtt": [
      "PupperImagesBucketD100108D",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperImagesBucket/AllowBucketNotificationsToPupperStackProcessImageFunctionFDB0A25C"
   }
  },
  "CreateDogFunctionServiceRole1C129A3D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/CreateDogFunction/ServiceRole/Resource"
   }
  },
  "CreateDogFunctionServiceRoleDefaultPolicyBB1CC401": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "DogsTable78D17CEF",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DogsTable78D17CEF",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PupperImagesBucketD100108D",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PupperImagesBucketD100108D",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CreateDogFunctionServiceRoleDefaultPolicyBB1CC401",
    "Roles": [
     {
      "Ref": "CreateDogFunctionServiceRole1C129A3D"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/CreateDogFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "CreateDogFunctionFED218F0": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-212684282361-us-east-2",
     "S3Key": "26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0.zip"
    },
    "Environment": {
     "Variables": {
      "DOGS_TABLE_NAME": {
       "Ref": "DogsTable78D17CEF"
      },
      "ENCRYPTION_KEY": "pupper-encryption-key-change-in-production"
     }
    },
    "Handler": "create-dog.handler",
    "Role": {
     "Fn::GetAtt": [
      "CreateDogFunctionServiceRole1C129A3D",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "CreateDogFunctionServiceRoleDefaultPolicyBB1CC401",
    "CreateDogFunctionServiceRole1C129A3D"
   ],
   "Metadata": {
    "aws:cdk:path": "PupperStack/CreateDogFunction/Resource",
    "aws:asset:path": "asset.26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "GetDogsFunctionServiceRole34EC9EA5": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/GetDogsFunction/ServiceRole/Resource"
   }
  },
  "GetDogsFunctionServiceRoleDefaultPolicyAC8EDEC3": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:Scan"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "DogsTable78D17CEF",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DogsTable78D17CEF",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "GetDogsFunctionServiceRoleDefaultPolicyAC8EDEC3",
    "Roles": [
     {
      "Ref": "GetDogsFunctionServiceRole34EC9EA5"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/GetDogsFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "GetDogsFunction8926D00C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-212684282361-us-east-2",
     "S3Key": "26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0.zip"
    },
    "Environment": {
     "Variables": {
      "DOGS_TABLE_NAME": {
       "Ref": "DogsTable78D17CEF"
      }
     }
    },
    "Handler": "get-dogs.handler",
    "Role": {
     "Fn::GetAtt": [
      "GetDogsFunctionServiceRole34EC9EA5",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "GetDogsFunctionServiceRoleDefaultPolicyAC8EDEC3",
    "GetDogsFunctionServiceRole34EC9EA5"
   ],
   "Metadata": {
    "aws:cdk:path": "PupperStack/GetDogsFunction/Resource",
    "aws:asset:path": "asset.26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "VoteDogFunctionServiceRoleA5A3AC58": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/VoteDogFunction/ServiceRole/Resource"
   }
  },
  "VoteDogFunctionServiceRoleDefaultPolicy3C55D1EB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "VotesTable39A917AC",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "VotesTable39A917AC",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "VoteDogFunctionServiceRoleDefaultPolicy3C55D1EB",
    "Roles": [
     {
      "Ref": "VoteDogFunctionServiceRoleA5A3AC58"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/VoteDogFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "VoteDogFunctionCA39C728": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-212684282361-us-east-2",
     "S3Key": "26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0.zip"
    },
    "Environment": {
     "Variables": {
      "VOTES_TABLE_NAME": {
       "Ref": "VotesTable39A917AC"
      }
     }
    },
    "Handler": "vote-dog.handler",
    "Role": {
     "Fn::GetAtt": [
      "VoteDogFunctionServiceRoleA5A3AC58",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "VoteDogFunctionServiceRoleDefaultPolicy3C55D1EB",
    "VoteDogFunctionServiceRoleA5A3AC58"
   ],
   "Metadata": {
    "aws:cdk:path": "PupperStack/VoteDogFunction/Resource",
    "aws:asset:path": "asset.26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "UploadImageFunctionServiceRoleAE8151F0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/UploadImageFunction/ServiceRole/Resource"
   }
  },
  "UploadImageFunctionServiceRoleDefaultPolicy070489FA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PupperImagesBucketD100108D",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PupperImagesBucketD100108D",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "UploadImageFunctionServiceRoleDefaultPolicy070489FA",
    "Roles": [
     {
      "Ref": "UploadImageFunctionServiceRoleAE8151F0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/UploadImageFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "UploadImageFunction40D24ACF": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-212684282361-us-east-2",
     "S3Key": "26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0.zip"
    },
    "Environment": {
     "Variables": {
      "IMAGES_BUCKET_NAME": {
       "Ref": "PupperImagesBucketD100108D"
      }
     }
    },
    "Handler": "upload-image.handler",
    "Role": {
     "Fn::GetAtt": [
      "UploadImageFunctionServiceRoleAE8151F0",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "UploadImageFunctionServiceRoleDefaultPolicy070489FA",
    "UploadImageFunctionServiceRoleAE8151F0"
   ],
   "Metadata": {
    "aws:cdk:path": "PupperStack/UploadImageFunction/Resource",
    "aws:asset:path": "asset.26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "ProcessImageFunctionServiceRole72C7EC03": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/ProcessImageFunction/ServiceRole/Resource"
   }
  },
  "ProcessImageFunctionServiceRoleDefaultPolicyB15F8842": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PupperImagesBucketD100108D",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PupperImagesBucketD100108D",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "DogsTable78D17CEF",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DogsTable78D17CEF",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ProcessImageFunctionServiceRoleDefaultPolicyB15F8842",
    "Roles": [
     {
      "Ref": "ProcessImageFunctionServiceRole72C7EC03"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/ProcessImageFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ProcessImageFunction340ACD7C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-212684282361-us-east-2",
     "S3Key": "26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0.zip"
    },
    "Environment": {
     "Variables": {
      "DOGS_TABLE_NAME": {
       "Ref": "DogsTable78D17CEF"
      }
     }
    },
    "Handler": "process-image-simple.handler",
    "MemorySize": 512,
    "Role": {
     "Fn::GetAtt": [
      "ProcessImageFunctionServiceRole72C7EC03",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 120
   },
   "DependsOn": [
    "ProcessImageFunctionServiceRoleDefaultPolicyB15F8842",
    "ProcessImageFunctionServiceRole72C7EC03"
   ],
   "Metadata": {
    "aws:cdk:path": "PupperStack/ProcessImageFunction/Resource",
    "aws:asset:path": "asset.26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "GetUserVotesFunctionServiceRole5F555563": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/GetUserVotesFunction/ServiceRole/Resource"
   }
  },
  "GetUserVotesFunctionServiceRoleDefaultPolicy6D3A1DA0": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:Scan"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "VotesTable39A917AC",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "VotesTable39A917AC",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "GetUserVotesFunctionServiceRoleDefaultPolicy6D3A1DA0",
    "Roles": [
     {
      "Ref": "GetUserVotesFunctionServiceRole5F555563"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/GetUserVotesFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "GetUserVotesFunction6B6B7600": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-212684282361-us-east-2",
     "S3Key": "26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0.zip"
    },
    "Environment": {
     "Variables": {
      "VOTES_TABLE_NAME": {
       "Ref": "VotesTable39A917AC"
      }
     }
    },
    "Handler": "get-user-votes.handler",
    "Role": {
     "Fn::GetAtt": [
      "GetUserVotesFunctionServiceRole5F555563",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "GetUserVotesFunctionServiceRoleDefaultPolicy6D3A1DA0",
    "GetUserVotesFunctionServiceRole5F555563"
   ],
   "Metadata": {
    "aws:cdk:path": "PupperStack/GetUserVotesFunction/Resource",
    "aws:asset:path": "asset.26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "PostConfirmationFunctionServiceRoleE856FC83": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PostConfirmationFunction/ServiceRole/Resource"
   }
  },
  "PostConfirmationFunctionServiceRoleDefaultPolicy49917DA4": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "cognito-idp:AdminAddUserToGroup",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "PupperUserPoolC5BC1883",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PostConfirmationFunctionServiceRoleDefaultPolicy49917DA4",
    "Roles": [
     {
      "Ref": "PostConfirmationFunctionServiceRoleE856FC83"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PostConfirmationFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "PostConfirmationFunction3DFFAE63": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-212684282361-us-east-2",
     "S3Key": "26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0.zip"
    },
    "Handler": "post-confirmation.handler",
    "Role": {
     "Fn::GetAtt": [
      "PostConfirmationFunctionServiceRoleE856FC83",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "PostConfirmationFunctionServiceRoleDefaultPolicy49917DA4",
    "PostConfirmationFunctionServiceRoleE856FC83"
   ],
   "Metadata": {
    "aws:cdk:path": "PupperStack/PostConfirmationFunction/Resource",
    "aws:asset:path": "asset.26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "PreSignupFunctionServiceRole5334302F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PreSignupFunction/ServiceRole/Resource"
   }
  },
  "PreSignupFunction4F2ED1FA": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-212684282361-us-east-2",
     "S3Key": "26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0.zip"
    },
    "Handler": "pre-signup.handler",
    "Role": {
     "Fn::GetAtt": [
      "PreSignupFunctionServiceRole5334302F",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "PreSignupFunctionServiceRole5334302F"
   ],
   "Metadata": {
    "aws:cdk:path": "PupperStack/PreSignupFunction/Resource",
    "aws:asset:path": "asset.26f4aa1317ca3c5ca4e314d509e9995c660e4d2274df448c2fb3c33111245bf0",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "PupperStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "PupperApiCF69E181": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Description": "API for Pupper dog adoption app",
    "Name": "Pupper Service"
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Resource"
   }
  },
  "PupperApiDeployment714C7E7Cb88d70cb317231c01679f003cbc17e71": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "API for Pupper dog adoption app",
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "DependsOn": [
    "PupperApidogsdogIdOPTIONSA3CD31DC",
    "PupperApidogsdogIdE4411718",
    "PupperApidogsdogIdvoteOPTIONSB722BDAB",
    "PupperApidogsdogIdvotePOSTF85B8192",
    "PupperApidogsdogIdvoteDD08CACD",
    "PupperApidogsGET8CF63279",
    "PupperApidogsOPTIONS8C0BA6CE",
    "PupperApidogsPOSTD2B177F5",
    "PupperApidogs5C027535",
    "PupperApiOPTIONS1AE22176",
    "PupperApiuploadOPTIONS3A7B1B33",
    "PupperApiuploadPOSTCA7712A1",
    "PupperApiuploadF8858F9F",
    "PupperApiusersuserIdOPTIONSDFEAC8B7",
    "PupperApiusersuserIdE8BCA39D",
    "PupperApiusersuserIdvotesGETD1839797",
    "PupperApiusersuserIdvotesOPTIONS6D9AD9D9",
    "PupperApiusersuserIdvotes6FF32DEB",
    "PupperApiusersOPTIONS03930153",
    "PupperApiusers1B967DF9"
   ],
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Deployment/Resource",
    "aws:cdk:do-not-refactor": true
   }
  },
  "PupperApiDeploymentStageprod6CE535E3": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "PupperApiDeployment714C7E7Cb88d70cb317231c01679f003cbc17e71"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/DeploymentStage.prod/Resource"
   }
  },
  "PupperApiOPTIONS1AE22176": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Fn::GetAtt": [
      "PupperApiCF69E181",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/OPTIONS/Resource"
   }
  },
  "PupperApidogs5C027535": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "PupperApiCF69E181",
      "RootResourceId"
     ]
    },
    "PathPart": "dogs",
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/Resource"
   }
  },
  "PupperApidogsOPTIONS8C0BA6CE": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PupperApidogs5C027535"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/OPTIONS/Resource"
   }
  },
  "PupperApidogsPOSTApiPermissionPupperStackPupperApiC85903B8POSTdogs15F58BDB": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "CreateDogFunctionFED218F0",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:212684282361:",
       {
        "Ref": "PupperApiCF69E181"
       },
       "/",
       {
        "Ref": "PupperApiDeploymentStageprod6CE535E3"
       },
       "/POST/dogs"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/POST/ApiPermission.PupperStackPupperApiC85903B8.POST..dogs"
   }
  },
  "PupperApidogsPOSTApiPermissionTestPupperStackPupperApiC85903B8POSTdogs1B7A8378": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "CreateDogFunctionFED218F0",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:212684282361:",
       {
        "Ref": "PupperApiCF69E181"
       },
       "/test-invoke-stage/POST/dogs"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/POST/ApiPermission.Test.PupperStackPupperApiC85903B8.POST..dogs"
   }
  },
  "PupperApidogsPOSTD2B177F5": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "CreateDogFunctionFED218F0",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "PupperApidogs5C027535"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/POST/Resource"
   }
  },
  "PupperApidogsGETApiPermissionPupperStackPupperApiC85903B8GETdogs500FF7F7": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "GetDogsFunction8926D00C",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:212684282361:",
       {
        "Ref": "PupperApiCF69E181"
       },
       "/",
       {
        "Ref": "PupperApiDeploymentStageprod6CE535E3"
       },
       "/GET/dogs"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/GET/ApiPermission.PupperStackPupperApiC85903B8.GET..dogs"
   }
  },
  "PupperApidogsGETApiPermissionTestPupperStackPupperApiC85903B8GETdogs3DA36ECD": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "GetDogsFunction8926D00C",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:212684282361:",
       {
        "Ref": "PupperApiCF69E181"
       },
       "/test-invoke-stage/GET/dogs"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/GET/ApiPermission.Test.PupperStackPupperApiC85903B8.GET..dogs"
   }
  },
  "PupperApidogsGET8CF63279": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "GetDogsFunction8926D00C",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "PupperApidogs5C027535"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/GET/Resource"
   }
  },
  "PupperApidogsdogIdE4411718": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "PupperApidogs5C027535"
    },
    "PathPart": "{dogId}",
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/{dogId}/Resource"
   }
  },
  "PupperApidogsdogIdOPTIONSA3CD31DC": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PupperApidogsdogIdE4411718"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/{dogId}/OPTIONS/Resource"
   }
  },
  "PupperApidogsdogIdvoteDD08CACD": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "PupperApidogsdogIdE4411718"
    },
    "PathPart": "vote",
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/{dogId}/vote/Resource"
   }
  },
  "PupperApidogsdogIdvoteOPTIONSB722BDAB": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PupperApidogsdogIdvoteDD08CACD"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/{dogId}/vote/OPTIONS/Resource"
   }
  },
  "PupperApidogsdogIdvotePOSTApiPermissionPupperStackPupperApiC85903B8POSTdogsdogIdvoteD5496833": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "VoteDogFunctionCA39C728",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:212684282361:",
       {
        "Ref": "PupperApiCF69E181"
       },
       "/",
       {
        "Ref": "PupperApiDeploymentStageprod6CE535E3"
       },
       "/POST/dogs/*/vote"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/{dogId}/vote/POST/ApiPermission.PupperStackPupperApiC85903B8.POST..dogs.{dogId}.vote"
   }
  },
  "PupperApidogsdogIdvotePOSTApiPermissionTestPupperStackPupperApiC85903B8POSTdogsdogIdvoteCCCC2111": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "VoteDogFunctionCA39C728",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:212684282361:",
       {
        "Ref": "PupperApiCF69E181"
       },
       "/test-invoke-stage/POST/dogs/*/vote"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/{dogId}/vote/POST/ApiPermission.Test.PupperStackPupperApiC85903B8.POST..dogs.{dogId}.vote"
   }
  },
  "PupperApidogsdogIdvotePOSTF85B8192": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "VoteDogFunctionCA39C728",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "PupperApidogsdogIdvoteDD08CACD"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/dogs/{dogId}/vote/POST/Resource"
   }
  },
  "PupperApiuploadF8858F9F": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "PupperApiCF69E181",
      "RootResourceId"
     ]
    },
    "PathPart": "upload",
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/upload/Resource"
   }
  },
  "PupperApiuploadOPTIONS3A7B1B33": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PupperApiuploadF8858F9F"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/upload/OPTIONS/Resource"
   }
  },
  "PupperApiuploadPOSTApiPermissionPupperStackPupperApiC85903B8POSTuploadC19F862D": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "UploadImageFunction40D24ACF",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:212684282361:",
       {
        "Ref": "PupperApiCF69E181"
       },
       "/",
       {
        "Ref": "PupperApiDeploymentStageprod6CE535E3"
       },
       "/POST/upload"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/upload/POST/ApiPermission.PupperStackPupperApiC85903B8.POST..upload"
   }
  },
  "PupperApiuploadPOSTApiPermissionTestPupperStackPupperApiC85903B8POSTupload31FCA8CA": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "UploadImageFunction40D24ACF",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:212684282361:",
       {
        "Ref": "PupperApiCF69E181"
       },
       "/test-invoke-stage/POST/upload"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/upload/POST/ApiPermission.Test.PupperStackPupperApiC85903B8.POST..upload"
   }
  },
  "PupperApiuploadPOSTCA7712A1": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "UploadImageFunction40D24ACF",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "PupperApiuploadF8858F9F"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/upload/POST/Resource"
   }
  },
  "PupperApiusers1B967DF9": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "PupperApiCF69E181",
      "RootResourceId"
     ]
    },
    "PathPart": "users",
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/users/Resource"
   }
  },
  "PupperApiusersOPTIONS03930153": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PupperApiusers1B967DF9"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/users/OPTIONS/Resource"
   }
  },
  "PupperApiusersuserIdE8BCA39D": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "PupperApiusers1B967DF9"
    },
    "PathPart": "{userId}",
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/users/{userId}/Resource"
   }
  },
  "PupperApiusersuserIdOPTIONSDFEAC8B7": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PupperApiusersuserIdE8BCA39D"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/users/{userId}/OPTIONS/Resource"
   }
  },
  "PupperApiusersuserIdvotes6FF32DEB": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "PupperApiusersuserIdE8BCA39D"
    },
    "PathPart": "votes",
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/users/{userId}/votes/Resource"
   }
  },
  "PupperApiusersuserIdvotesOPTIONS6D9AD9D9": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PupperApiusersuserIdvotes6FF32DEB"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/users/{userId}/votes/OPTIONS/Resource"
   }
  },
  "PupperApiusersuserIdvotesGETApiPermissionPupperStackPupperApiC85903B8GETusersuserIdvotesC893DBB3": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "GetUserVotesFunction6B6B7600",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:212684282361:",
       {
        "Ref": "PupperApiCF69E181"
       },
       "/",
       {
        "Ref": "PupperApiDeploymentStageprod6CE535E3"
       },
       "/GET/users/*/votes"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/users/{userId}/votes/GET/ApiPermission.PupperStackPupperApiC85903B8.GET..users.{userId}.votes"
   }
  },
  "PupperApiusersuserIdvotesGETApiPermissionTestPupperStackPupperApiC85903B8GETusersuserIdvotesC3E9D2A9": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "GetUserVotesFunction6B6B7600",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:212684282361:",
       {
        "Ref": "PupperApiCF69E181"
       },
       "/test-invoke-stage/GET/users/*/votes"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/users/{userId}/votes/GET/ApiPermission.Test.PupperStackPupperApiC85903B8.GET..users.{userId}.votes"
   }
  },
  "PupperApiusersuserIdvotesGETD1839797": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "GetUserVotesFunction6B6B7600",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "PupperApiusersuserIdvotes6FF32DEB"
    },
    "RestApiId": {
     "Ref": "PupperApiCF69E181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperApi/Default/users/{userId}/votes/GET/Resource"
   }
  },
  "PupperUserPoolC5BC1883": {
   "Type": "AWS::Cognito::UserPool",
   "Properties": {
    "AccountRecoverySetting": {
     "RecoveryMechanisms": [
      {
       "Name": "verified_email",
       "Priority": 1
      }
     ]
    },
    "AdminCreateUserConfig": {
     "AllowAdminCreateUserOnly": false
    },
    "AliasAttributes": [
     "email"
    ],
    "AutoVerifiedAttributes": [
     "email"
    ],
    "EmailVerificationMessage": "The verification code to your new account is {####}",
    "EmailVerificationSubject": "Verify your new account",
    "Policies": {
     "PasswordPolicy": {
      "MinimumLength": 8,
      "RequireLowercase": true,
      "RequireNumbers": true,
      "RequireSymbols": false,
      "RequireUppercase": true
     }
    },
    "Schema": [
     {
      "Mutable": true,
      "Name": "email",
      "Required": true
     },
     {
      "Mutable": true,
      "Name": "name",
      "Required": true
     },
     {
      "AttributeDataType": "String",
      "Mutable": false,
      "Name": "user_role",
      "StringAttributeConstraints": {
       "MaxLength": "20",
       "MinLength": "1"
      }
     }
    ],
    "SmsVerificationMessage": "The verification code to your new account is {####}",
    "UserPoolName": "pupper-users",
    "VerificationMessageTemplate": {
     "DefaultEmailOption": "CONFIRM_WITH_CODE",
     "EmailMessage": "The verification code to your new account is {####}",
     "EmailSubject": "Verify your new account",
     "SmsMessage": "The verification code to your new account is {####}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperUserPool/Resource"
   }
  },
  "PupperUserPoolClient3368A196": {
   "Type": "AWS::Cognito::UserPoolClient",
   "Properties": {
    "AllowedOAuthFlows": [
     "implicit",
     "code"
    ],
    "AllowedOAuthFlowsUserPoolClient": true,
    "AllowedOAuthScopes": [
     "profile",
     "phone",
     "email",
     "openid",
     "aws.cognito.signin.user.admin"
    ],
    "CallbackURLs": [
     "https://example.com"
    ],
    "ClientName": "pupper-web-client",
    "ExplicitAuthFlows": [
     "ALLOW_USER_PASSWORD_AUTH",
     "ALLOW_USER_SRP_AUTH",
     "ALLOW_REFRESH_TOKEN_AUTH"
    ],
    "GenerateSecret": false,
    "SupportedIdentityProviders": [
     "COGNITO"
    ],
    "UserPoolId": {
     "Ref": "PupperUserPoolC5BC1883"
    }
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/PupperUserPoolClient/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/22PQU/DMAyFf8vumZmKxH0r4oaYOjhPbuoVb2lS1SlTFeW/o6QdA4nT++yn+L0UUGwK2KzwKmvdXNaGawgHj/qi8CrH0EwWO9fUEN6xNqTKk80QlTxC2I36Qj4tF5pl7wzr6b5e5nnYoVBUBru6QQjlye5p6FiEnVUvo9U+QXmyN46KsYNQuTk96z1gptTmiCLkBbZJFPbcoqcrThAqEr/tOb9e8Jl646aObC7/azp4bHPODBWJGwdNqbR6Jf/pmmQudHOXy5mj0q617B2ED6Fh75xJ9g/foDS8pP/dxPjvWZW/lUqxbZPxNvp+9FFZ1xCc5eGrKOAJNquzMK+H0XruCKpZvwHYyYc55QEAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "PupperStack/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "PupperApiEndpoint7D73B7FB": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "PupperApiCF69E181"
      },
      ".execute-api.us-east-2.",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "PupperApiDeploymentStageprod6CE535E3"
      },
      "/"
     ]
    ]
   }
  },
  "DogsTableName": {
   "Value": {
    "Ref": "DogsTable78D17CEF"
   },
   "Export": {
    "Name": "PupperDogsTableName"
   }
  },
  "VotesTableName": {
   "Value": {
    "Ref": "VotesTable39A917AC"
   },
   "Export": {
    "Name": "PupperVotesTableName"
   }
  },
  "ImagesBucketName": {
   "Value": {
    "Ref": "PupperImagesBucketD100108D"
   },
   "Export": {
    "Name": "PupperImagesBucketName"
   }
  },
  "ApiUrl": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "PupperApiCF69E181"
      },
      ".execute-api.us-east-2.",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "PupperApiDeploymentStageprod6CE535E3"
      },
      "/"
     ]
    ]
   },
   "Export": {
    "Name": "PupperApiUrl"
   }
  },
  "UserPoolId": {
   "Value": {
    "Ref": "PupperUserPoolC5BC1883"
   },
   "Export": {
    "Name": "PupperUserPoolId"
   }
  },
  "UserPoolClientId": {
   "Value": {
    "Ref": "PupperUserPoolClient3368A196"
   },
   "Export": {
    "Name": "PupperUserPoolClientId"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}